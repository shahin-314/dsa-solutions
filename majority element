

### Problem Recap: Majority Element (LeetCode #169)
- **Kya Hai:** Tumhe ek integer array `arr` diya gaya hai jisme ek majority element ho sakta hai (woh number jo n/2 se zyada baar aata hai). Tumhe woh number return karna hai. Agar nahi hai, toh -1 ya assume karo ki hamesha majority hota hai.
- **Examples:**
  - `arr = [3, 2, 3]`, `n = 3` → Majority = 3 (3 > 3/2 = 1.5, toh 2 baar aaya)
  - `arr = [2, 2, 1, 1, 1, 2, 2]`, `n = 7` → Majority = 2 (4 baar aaya > 3.5)
- **Assumption:** Code mein agar majority nahi hai, toh -1 return karta hai, lekin problem mein assume karo majority hamesha hai.

---

### Tera Sawal Check Karte Hai
1. **Count = 1 Kyun Hai, 0 Kyun Nahi?**
   - **Kyun:** Count shuru mein 1 hai kyunki jab hum loop mein ek number ko check karte hai, woh pehle baar aaya hai, toh count 1 se start hota hai (kyunki woh khud hai). Agar 0 se start karega, toh galat count milega. Example: Agar array = [3], toh count = 1 hona chahiye, 0 nahi.
   - **Example:** Agar count = 0 se start karte, toh first number ke liye count++ karna padega, lekin yeh code mein if-else ke andar hai, toh sahi hai 1 se start karna.

2. **Ans = -1 Kyun Hai, 0 Kyun Nahi?**
   - **Kyun:** Ans shuru mein -1 set kiya hai kyunki yeh ek flag hai jo batata hai ki abhi majority mila nahi. -1 use kiya kyunki array mein positive numbers hai, toh -1 confuse nahi karega. Agar majority nahi mila, toh -1 return karta hai. 0 use nahi kiya kyunki 0 ek valid element ho sakta hai (jaise array = [0,0,0], majority = 0).
   - **Example:** Agar array mein majority nahi hai, toh -1 return karta hai.

3. **If (count > n/2) Loop ke Andar Kyun Hai?**
   - **Kyun:** Tera code mein yeh condition `else` block mein hai, jo galat hai. Yeh condition loop ke andar hone se sirf tab check hota hai jab group khatam hota hai, lekin agar last group majority hai, toh sahi, lekin agar multiple groups hai, toh sahi kaam karta hai kyunki sorted array mein majority consecutive aayegi agar count > n/2 hai.
   - **Issue:** Agar code mein break hai, toh pehle majority milte hi ruk jata hai, jo sahi hai lekin agar majority nahi hai, toh ans -1 rahega.
   - **Correction:** Yeh condition loop ke andar sahi hai agar break ke saath, lekin agar majority nahi hai, toh -1 return karna sahi hai.

- **Overall:** Tera code sahi hai agar majority consecutive aaye sorted array mein, jo sahi hai kyunki majority n/2 se zyada hoti hai, toh sorted mein consecutive aayegi.

---

### Code with Line-by-Line Explanation, Dry Run, and Comments

```cpp
#include <bits/stdc++.h>
using namespace std;

int findMajorityElement(int arr[], int n) 
{
    int count = 1; // Initialize count to 1 for the first element
    // Comment: Yeh count batata hai ki current number kitni baar aaya hai. Shuru mein 1 hai kyunki pehle number ko count kar rahe hai.

    int ans = -1; // Initialize answer to -1 (flag if no majority found)
    // Comment: Yeh final majority element store karega. Shuru mein -1 hai kyunki agar majority nahi mila, toh -1 return karna hai.

    sort(arr, arr + n); // Sort the array in ascending order
    // Comment: Yeh array ko chhote se bade order mein sort karta hai taaki consecutive numbers ek saath aayein.
    // Flow: Sorting ke baad consecutive repeats check kar sakte hai.

    for (int i = 0; i < n; i++) // Loop through each element in the sorted array
    {
        // Comment: Yeh loop har element check karega aur consecutive counts count karega.
        // Flow: i = 0 se n-1 tak chalega.

        if (arr[i] == arr[i + 1]) // If current element is same as next
        {
            // Comment: Agar agla element same hai, toh count badhao.
            // Flow: Same numbers consecutive hone pe count badhega.
            count++; // Increase count for consecutive repeats
            // Comment: Count badhao kyunki same number aaya.
            // Flow: count = 1 se 2 ho jayega.
        }
        else {
            // Comment: Agar agla element alag hai, toh current group khatam hui.
            // Flow: Yeh else tab chalega jab consecutive repeats khatam ho jayein.
            count = 1; // Reset count for next group
            // Comment: Naya group ke liye count 1 se reset karo.
            // Flow: count = 1 ho jayega.
        }

        if (count > n / 2) // Check if current count is majority
        {
            // Comment: Agar count n/2 se zyada ho gaya, toh yeh majority hai.
            // Flow: Yeh check karta hai ki current group majority hai ya nahi.
            ans = arr[i]; // Update answer with current element
            // Comment: Yeh majority element store karta hai.
            // Flow: ans = -1 se current arr[i] ho jayega.
            break; // Exit loop as majority found
            // Comment: Majority mil gaya, toh loop se bahar aao.
            // Flow: Break se loop khatam ho jayega.
        }
    }

    return ans; // Return the majority element or -1
    // Comment: Majority mil gaya toh woh return, warna -1.
    // Flow: Yeh final answer deta hai.
}
```

---

### Detailed Dry Run (Example: `arr = [3, 2, 3]`, `n = 3`)
- **Initial State:**
  - `count = 1`, `ans = -1`, `arr = [3, 2, 3]`

1. **Sort:** `sort(arr, arr + n)` → `arr = [2, 3, 3]`
- **Step 2: Loop Start**
  - **i = 0 (arr[0] = 2):**
    - `arr[0] == arr[1]` → `2 == 3` (false)
    - `else`: `count = 1`
    - `if (1 > 3 / 2 = 1)` → `1 > 1` (false)
  - **i = 1 (arr[1] = 3):**
    - `arr[1] == arr[2]` → `3 == 3` (true)
    - `count = 2`
    - `if (2 > 1)` → true
      - `ans = arr[1] = 3`
      - `break` → loop khatam
- **Return:** `3` (sahi)

---

### Dry Run (Example: `arr = [2, 2, 1, 1, 1, 2, 2]`, `n = 7`)
- **Sort:** `arr = [1, 1, 1, 2, 2, 2, 2]`
- **Loop:**
  - `i = 0 (1 == 1)` → `count = 2`
  - `2 > 3.5` → false
  - `i = 1 (1 == 1)` → `count = 3`
  - `3 > 3.5` → false
  - `i = 2 (1 == 2)` → `else`, `count = 1`
  - `1 > 3.5` → false
  - `i = 3 (2 == 2)` → `count = 2`
  - `2 > 3.5` → false
  - `i = 4 (2 == 2)` → `count = 3`
  - `3 > 3.5` → false
  - `i = 5 (2 == 2)` → `count = 4`
  - `4 > 3.5` → true
    - `ans = 2`
    - `break`
- **Return:** `2` (sahi)

#### **Dry Run (No Majority: `arr = [1, 2, 3]`, `n = 3`):**
- **Sort:** `arr = [1, 2, 3]`
- **Loop:**
  - `i = 0 (1 == 2)` → `else`, `count = 1`
  - `1 > 1.5` → false
  - `i = 1 (2 == 3)` → `else`, `count = 1`
  - `1 > 1.5` → false
- **Return:** `-1` (sahi)

---

### Pura Flow Explanation
- **Step 1:** Array ko sort karo taaki same elements consecutive aaye.
- **Step 2:** Loop chalao:
  - Har consecutive same element pe count badhao.
  - Jab different element aaye, toh check karo ki abhi tak ka count majority hai ya nahi.
  - Agar count > n/2 ho gaya, toh majority mil gaya, ans update karo aur break karo.
- **Kyun Work Karta Hai:** Majority element n/2 se zyada aata hai, toh sorted array mein woh consecutive aayega aur count > n/2 hoga.

---

### Built-in Functions Use Kar Sakte Hai?
- **Haan:** 
  - `sort(arr, arr + n)`: Already use kiya.
  - `max()`: Code mein use nahi, lekin agar chahiye toh kar sakte hai.
  - **No Need for More:** Yeh code mein built-in nahi chahiye, lekin agar count karna ho toh `unordered_map` use kar sakte hai, lekin yeh O(n log n) time mein kaam karta hai.

---

### Beginner Tips
- **Practice:** `[1, 1, 2, 2, 2]`, n=5 pe try karo.
- **Visualize:** Sorted array mein consecutive counts dekho.
- **Debug:** Har step pe count print kar ke check karo.

Ab samajh aaya na, bro? Code ka pura flow, line-by-line explanation, aur dry run se sab clear ho gaya hoga. Koi doubt ho toh bol! Kya bolta hai? (Chai abhi garam hai, 07:55 PM IST!)
