################  CODE  ######################

class Queue {

	int front, rear;
	vector<int> arr;

public:
	Queue()
	{
		front = 0;
		rear = 0;
		arr.resize(100001);
	}

	// Enqueue (add) element 'e' at the end of the queue.
	void enqueue(int e)
	{
		arr[rear]=e;
		rear++;
	}

	// Dequeue (retrieve) the element from the front of the queue.
	int dequeue()
	{
		if(front==rear) return -1;

		int deletedElement = arr[front];
		front++;
		return deletedElement;
	}
};

##############  EXPLAINATION  ##############

Let me explain the code in detail for easy understanding.

### Overview

This code implements a **Queue** data structure using a **vector** in C++. A queue follows the **FIFO (First In, First Out)** principle, meaning the first element added to the queue is the first one to be removed.

Here are the key components of this code:

### 1. **Class Declaration:**

```cpp
class Queue {
    int front, rear;
    vector<int> arr;
};
```

- **`front`**: This variable keeps track of the index of the front element in the queue.
- **`rear`**: This variable keeps track of the index where the next element will be inserted in the queue.
- **`arr`**: This is a **vector** used to store the elements in the queue. A vector is dynamic, meaning its size can grow as needed.

### 2. **Constructor:**

```cpp
Queue() {
    front = 0;
    rear = 0;
    arr.resize(100001);  // Resize vector to hold up to 100,001 elements.
}
```

- **`front = 0`**: Initializes the `front` pointer to 0, meaning the first element in the queue will be at index `0` initially.
- **`rear = 0`**: Initializes the `rear` pointer to 0. This means the next element to be added will be inserted at index `0` initially.
- **`arr.resize(100001)`**: Resizes the vector `arr` to accommodate 100,001 elements. It ensures that the queue can hold up to 100,000 elements without resizing the vector again, which is efficient.

### 3. **Enqueue (Add an element to the queue):**

```cpp
void enqueue(int e) {
    arr[rear] = e;  // Insert element at the 'rear' position in the array.
    rear++;          // Increment the 'rear' pointer to the next position.
}
```

- **`arr[rear] = e`**: Inserts the element `e` into the vector at the current `rear` position.
- **`rear++`**: After adding the element, the `rear` pointer is incremented to point to the next available position. This ensures the next element is added to the correct position at the end of the queue.

### 4. **Dequeue (Remove an element from the front of the queue):**

```cpp
int dequeue() {
    if (front == rear) return -1;  // If the queue is empty, return -1.

    int deletedElement = arr[front];  // Get the element at the 'front' position.
    front++;  // Move the 'front' pointer to the next element.
    return deletedElement;  // Return the removed element.
}
```

- **`if (front == rear)`**: This checks if the queue is empty. If `front` is equal to `rear`, it means there are no elements in the queue, so the function returns `-1` to indicate that the queue is empty.
- **`int deletedElement = arr[front]`**: Retrieves the element at the front of the queue. This is the element that will be removed.
- **`front++`**: After removing the element, the `front` pointer is incremented to the next element, so the next time `dequeue()` is called, it will remove the next element in the queue.
- **`return deletedElement`**: Returns the element that was just dequeued.

### How the Queue Operations Work:

1. **Enqueue Operation:**
   - When you call `enqueue(10)`, the number `10` will be inserted at the position pointed to by `rear`.
   - The `rear` pointer will then be incremented to point to the next available spot in the queue.
   
2. **Dequeue Operation:**
   - When you call `dequeue()`, the element at the position pointed to by `front` is removed.
   - The `front` pointer is incremented to point to the next element in the queue.

### Example of How the Queue Works:

Consider the following sequence of operations:

```cpp
Queue q;          // Initialize the queue.
q.enqueue(2);     // Add 2 to the queue.
q.enqueue(7);     // Add 7 to the queue.
q.enqueue(13);    // Add 13 to the queue.

cout << q.dequeue();  // Prints 2 (removes 2 from the front).
cout << q.dequeue();  // Prints 7 (removes 7 from the front).
cout << q.dequeue();  // Prints 13 (removes 13 from the front).
cout << q.dequeue();  // Prints -1 (queue is empty).
```

- **After `enqueue(2)`**: The queue is `{2}`. `front = 0`, `rear = 1`.
- **After `enqueue(7)`**: The queue is `{2, 7}`. `front = 0`, `rear = 2`.
- **After `enqueue(13)`**: The queue is `{2, 7, 13}`. `front = 0`, `rear = 3`.
- **After `dequeue()` (First call)**: The queue is `{7, 13}`. The element `2` is removed from the front, and `front` moves to 1. It prints `2`.
- **After `dequeue()` (Second call)**: The queue is `{13}`. The element `7` is removed from the front, and `front` moves to 2. It prints `7`.
- **After `dequeue()` (Third call)**: The queue is `{}` (empty). The element `13` is removed from the front, and `front` moves to 3. It prints `13`.
- **After `dequeue()` (Fourth call)**: Since the queue is empty, it prints `-1`.

### Key Points to Remember:
- The queue works by maintaining two pointers: `front` (points to the first element) and `rear` (points to the last element).
- The `enqueue()` operation adds an element to the end of the queue, and `dequeue()` removes the element from the front.
- If the queue is empty, `dequeue()` returns `-1`.
- The queue's capacity is implicitly handled by the vector resizing, and there's no need to manually handle overflow.

This approach provides a very efficient way of implementing a queue using dynamic arrays. Let me know if you need further clarification!
