
### Problem Statement Recap: Jump Game II (LeetCode #45)
- **Problem:** Tumhe ek array `nums` diya gaya hai jisme har index pe ek jump value hai (kitna aage jump kar sakte ho). Tum shuru index (0) se start karte ho, aur minimum jumps nikalne hai jo last index (n-1) tak pahunchaye. Yeh guarantee hai ki last index tak pahunchna possible hai.
- **Examples:**
  - `nums = [2,3,1,1,4]`, `n = 5` → Output: 2
    - Path: 0 → 1 (jump 1), 1 → 4 (jump 3)
  - `nums = [2,3,0,1,4]`, `n = 5` → Output: 2
    - Path: 0 → 2 (jump 2), 2 → 4 (jump 2)
- **Constraints:**
  - 1 <= `nums.length` <= 10^4
  - 0 <= `nums[i]` <= 10^3

---

### Code with Line-by-Line Explanation, Values, and Dry Run
```cpp
class Solution {
public:
    int jump(vector<int>& nums) 
    {
        int jumps = 0; // This counts the minimum number of jumps needed, starts at 0
        // Explanation: Yeh batata hai ki kitne jumps liye gaye. Shuru mein 0 hai kyunki abhi jump nahi liya.
        // Dry Run (nums = [2,3,1,1,4], n = 5): jumps = 0

        int far = 0; // This stores the farthest index we can reach in the current jump
        // Explanation: Yeh batata hai ki current jump se kitna aage tak ja sakte hai. Shuru mein 0 hai.
        // Dry Run: far = 0

        int curr = 0; // This is the current farthest index we have reached so far
        // Explanation: Yeh batata hai ki ab tak ka maximum reachable index. Shuru mein 0 hai.
        // Dry Run: curr = 0

        int n = nums.size(); // Get the total number of elements in the array
        // Explanation: Yeh array ki length nikaalta hai taaki loop chalane ki limit pata chale.
        // Dry Run: n = 5

        for (int i = 0; i < n - 1; ++i) // Loop from index 0 to n-2 (before last index)
        {
            // Explanation: Yeh loop har index pe check karega ki wahan se kitna aage ja sakte hai, lekin last index tak nahi jayega.
            // Dry Run: i = 0 (first iteration)

            far = max(far, i + nums[i]); // Update far to the farthest we can jump from current index
            // Explanation: `i + nums[i]` batata hai ki current index se kitna aage ja sakte hai, aur `max` se far ko update karte hai.
            // Dry Run: i = 0, nums[0] = 2, i + nums[i] = 0 + 2 = 2, far = max(0, 2) = 2

            if (i == curr) // If we have reached the current farthest index, take a new jump
            {
                // Explanation: Jab current index `curr` ke barabar ho jaye, toh naya jump lena hai.
                // Dry Run: i = 0, curr = 0, 0 == 0 (true) -> enter
                curr = far; // Update curr to the new farthest index
                // Dry Run: curr = 2
                ++jumps; // Increase the jump count
                // Dry Run: jumps = 0 + 1 = 1
            }
            // Dry Run: Next iteration, i = 1
        }

        return jumps; // Return the minimum number of jumps
        // Explanation: Loop khatam hone ke baad yeh minimum jumps hai.
        // Dry Run: return 2 (baad mein check karenge)
    }
};
```

---

### Dry Run (Example: `nums = [2,3,1,1,4]`, `n = 5`)
- **Step 1: Initialize**
  - `jumps = 0`, `far = 0`, `curr = 0`, `n = 5`
- **Step 2: Loop Start**
  - **i = 0:**
    - `far = max(0, 0 + 2) = 2`
    - `if (0 == 0)` → true
      - `curr = 2`
      - `jumps = 0 + 1 = 1`
  - **i = 1:**
    - `far = max(2, 1 + 3) = max(2, 4) = 4`
    - `if (1 == 2)` → false
  - **i = 2:**
    - `far = max(4, 2 + 1) = max(4, 3) = 4`
    - `if (2 == 2)` → true
      - `curr = 4`
      - `jumps = 1 + 1 = 2`
  - **i = 3:**
    - `far = max(4, 3 + 1) = max(4, 4) = 4`
    - `if (3 == 4)` → false
- **Step 3: Return**
  - `return 2`
- **Output:** `2`
- **Explanation:** 2 jumps mein last index (4) tak pahunch gaya: 0 → 1 (via max reach), 1 → 4.

#### **Dry Run (Example: `nums = [2,3,0,1,4]`, `n = 5`)**
- **Step 1: Initialize**
  - `jumps = 0`, `far = 0`, `curr = 0`, `n = 5`
- **Step 2: Loop Start**
  - **i = 0:**
    - `far = max(0, 0 + 2) = 2`
    - `if (0 == 0)` → true
      - `curr = 2`
      - `jumps = 0 + 1 = 1`
  - **i = 1:**
    - `far = max(2, 1 + 3) = max(2, 4) = 4`
    - `if (1 == 2)` → false
  - **i = 2:**
    - `far = max(4, 2 + 0) = max(4, 2) = 4`
    - `if (2 == 2)` → true
      - `curr = 4`
      - `jumps = 1 + 1 = 2`
  - **i = 3:**
    - `far = max(4, 3 + 1) = max(4, 4) = 4`
    - `if (3 == 4)` → false
- **Step 3: Return**
  - `return 2`
- **Output:** `2`
- **Explanation:** 2 jumps mein last index (4) tak pahunch gaya: 0 → 2, 2 → 4.

---

### Time and Space Complexity
- **Time Complexity: O(n)**
  - Loop `n-1` baar chalta hai, aur har step mein constant time operations hai.
- **Space Complexity: O(1)**
  - Sirf `jumps`, `far`, `curr`, aur `n` variables use hue.

---

### Why This Approach Works?
- **Greedy Logic:** Har step pe `far` ko maximum reachable index se update karta hai, aur jab `curr` tak pahunch jaye toh naya jump leta hai. Yeh guarantee karta hai ki minimum jumps mile.
- **Optimization:** Ek hi pass mein solution mil jata hai.

---

