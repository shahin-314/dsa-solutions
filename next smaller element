### ✅ **Detailed Explanation of Code with Values, Steps & Diagrams (Beginner-Friendly)**  

---

### 🚀 **Problem Recap:**  
You need to find the **Next Smaller Element (NSE)** to the **right** of each element in the array.  
If there’s no smaller element to the right, the result should be `-1`.  

#### Example Input:  
`arr = [2, 1, 4, 3]`  

#### Expected Output:  
`[1, -1, 3, -1]`  
🔎 **Why?**  
- For `2`, the next smaller element to the right is `1`.  
- For `1`, no smaller element exists to its right → `-1`.  
- For `4`, the next smaller element is `3`.  
- For `3`, no smaller element to the right → `-1`.  

---

## 📝 **Code with Step-by-Step Explanation**

```cpp
#include <bits/stdc++.h>
using namespace std;

vector<int> nextSmallerElement(vector<int> &arr, int n) {
    vector<int> result(n, -1);  // Initialize result array with -1 for all elements
    stack<int> st;              // Stack to store indices of elements

    // Traverse the array from right to left
    for (int i = n - 1; i >= 0; i--) {
        // Pop elements from stack while top of stack is greater or equal to current element
        while (!st.empty() && arr[st.top()] >= arr[i]) {
            st.pop();
        }

        // If stack is not empty, top of stack is the next smaller element
        if (!st.empty()) {
            result[i] = arr[st.top()];
        }

        // Push current element's index into the stack
        st.push(i);
    }

    return result;  // Return the array containing next smaller elements
}
```

---

## 🔍 **Line-by-Line Explanation with Values**

### **Step 1: Initialization**
```cpp
vector<int> result(n, -1);  // result = [-1, -1, -1, -1]
stack<int> st;              // st = empty
```
- `result`: Holds the next smaller element for each position. Initially `-1` for all.  
- `st`: Stack to **store indices** of elements (not values).  

---

### **Step 2: Traverse from Right to Left (Why?)**  
👉 We go **right to left** because we are checking for smaller elements on the **right side** of each element.

---

## 🧩 **Dry Run with Example: `arr = [2, 1, 4, 3]`**

### ➡️ **i = 3 (arr[3] = 3)**  
```cpp
while (!st.empty() && arr[st.top()] >= 3) { ... } // stack is empty → skip
```
- Stack is empty → no next smaller element → result[3] stays `-1`.  

```cpp
st.push(3);  // Push index 3
```
📦 **Stack:** `[3]` → (value: `3`)  
📊 **Result:** `[-1, -1, -1, -1]`  

---

### ➡️ **i = 2 (arr[2] = 4)**  
```cpp
while (!st.empty() && arr[st.top()] >= 4) { ... } // arr[3] = 3 < 4 → no pop
```
- Top of stack (3 → value `3`) is **smaller** than `4` → no pop.  

```cpp
result[2] = arr[st.top()];  // result[2] = arr[3] = 3
```
✅ Next smaller element for `4` is `3`.  

```cpp
st.push(2);  // Push index 2
```
📦 **Stack:** `[3, 2]` → values: `[3, 4]`  
📊 **Result:** `[-1, -1, 3, -1]`  

---

### ➡️ **i = 1 (arr[1] = 1)**  
```cpp
while (!st.empty() && arr[st.top()] >= 1) {
    st.pop();  // arr[2] = 4 ≥ 1 → pop(2)
    st.pop();  // arr[3] = 3 ≥ 1 → pop(3)
}
```
- We pop both indices `2` and `3` because their values `4` and `3` are **greater or equal** to `1`.  
- After popping, the stack is empty.  

```cpp
if (!st.empty()) { ... }  // stack is empty → result[1] = -1
```
No smaller element to the right of `1`.  

```cpp
st.push(1);  // Push index 1
```
📦 **Stack:** `[1]` → (value: `1`)  
📊 **Result:** `[-1, -1, 3, -1]`  

---

### ➡️ **i = 0 (arr[0] = 2)**  
```cpp
while (!st.empty() && arr[st.top()] >= 2) { ... }  // arr[1] = 1 < 2 → no pop
```
- Top of stack (1 → value `1`) is **smaller** than `2` → no pop.  

```cpp
result[0] = arr[st.top()];  // result[0] = arr[1] = 1
```
✅ Next smaller element for `2` is `1`.  

```cpp
st.push(0);  // Push index 0
```
📦 **Stack:** `[1, 0]` → values: `[1, 2]`  
📊 **Result:** `[1, -1, 3, -1]` ✅  

---

## 🔥 **Final Result:**  
`[1, -1, 3, -1]` ✔️ Matches the expected output!  

---

## 📊 **Visualization of Stack Operations**

```
Step      i   arr[i]  Stack (Indices)   Stack (Values)   Result
---------------------------------------------------------------
Start     -     -        []                 []           [-1, -1, -1, -1]
i = 3     3     3        [3]                [3]          [-1, -1, -1, -1]
i = 2     2     4        [3, 2]             [3, 4]       [-1, -1, 3, -1]
i = 1     1     1        [1]                [1]          [-1, -1, 3, -1]
i = 0     0     2        [1, 0]             [1, 2]       [1, -1, 3, -1]
```

---

## 🧠 **Why This Approach is Best for You (Beginner Perspective):**  
✅ **Simple logic:** Just remember – use a stack to find smaller elements efficiently.  
✅ **Time Efficient:** O(n) → Each element is pushed and popped at most once.  
✅ **Space Efficient:** Uses extra space for the stack, but optimal for this problem.  
✅ **Beginner-Friendly Comments:** You can easily revise this later and understand it.  

---

🔔 **Let me know if you want me to explain a different example or concept! 😊**
