
### Step 1: Understanding the Problem (Super Simple)

- **What’s the task?**  
  You’re given a string `STR` (e.g., "i love programming"). Your job is to **make the first letter of each word uppercase** and keep the rest of the letters unchanged.  
  - A **word** is a group of letters separated by spaces.  
  - Example: "i love programming" → "I Love Programming".  
  - Return the modified string.

- **Key Points**:  
  - The string only contains **letters (a-z, A-Z)** and **spaces**.  
  - Words are separated by **single spaces**.  
  - You need to change **only the first letter of each word** to uppercase (e.g., 'i' → 'I', 'l' → 'L').  
  - Other letters stay as they are (uppercase or lowercase).  
  - The string can be long (up to 10^5 characters), so the code must be fast.

- **Examples**:  
  - **Input**: "i love programming"  
    - Output: "I Love Programming"  
    - Why? 'i' → 'I', 'l' → 'L', 'p' → 'P', rest unchanged.  
  - **Input**: "they are playing cricket"  
    - Output: "They Are Playing Cricket"  
    - Why? Capitalize 't', 'a', 'p', 'c'.  
  - **Input**: "good to see you"  
    - Output: "Good To See You"  
    - Why? Capitalize 'g', 't', 's', 'y'.

- **Constraints**:  
  - `1 <= T <= 10`: Number of test cases (handled by Coding Ninjas).  
  - `1 <= |STR| <= 10^5`: String length can be up to 100,000, so we need an efficient solution (O(N) is fine).  
  - String has only letters and spaces.  
  - Time limit: 1 second.

- **What we need to do**:  
  - Find the first letter of each word.  
  - Convert it to uppercase.  
  - Keep the rest of the string unchanged.  
  - Return the new string.

---

### Step 2: Solution Approach (Simple Logic)

- **How to identify the first letter of a word?**  
  - A word starts:  
    - At the **beginning of the string** (index 0).  
    - **After a space**.  
  - Example: In "i love", 'i' is at index 0, 'l' is after the space at index 1.

- **How to convert to uppercase?**  
  - Use the `toupper()` function (from `<cctype>`, included in `<bits/stdc++.h>`).  
  - `toupper(c)` converts a character to uppercase (e.g., 'a' → 'A', 'A' stays 'A', numbers stay unchanged).  
  - Similar to `tolower()` from your previous palindrome problem, but opposite (makes uppercase).

- **Plan**:  
  - Loop through the string.  
  - Capitalize:  
    - The first character (`str[0]`).  
    - Any character after a space (`str[i]` if `str[i-1]` is a space).  
  - Modify the string directly (since `str` is passed by value, we can change it and return it).  
  - Time: O(N) to scan the string once. Space: O(1) extra (excluding input/output).

---

### Step 3: The Code (With Detailed Comments)
Here’s the complete solution for the `convertString` function, written for beginners with clear comments:

```cpp
#include <bits/stdc++.h> 
string convertString(string str) 
{
    // Step 1: Get string length.
    int n = str.size();
    
    // Step 2: If string is not empty, capitalize the first character.
    if (n > 0) {
        str[0] = toupper(str[0]); // Convert first letter to uppercase.
    }
    
    // Step 3: Loop through string starting from index 1.
    // Check for spaces and capitalize the letter after each space.
    for (int i = 1; i < n; i++) {
        if (str[i-1] == ' ') { // If previous character is a space.
            str[i] = toupper(str[i]); // Capitalize current letter.
        }
    }
    
    // Step 4: Return the modified string.
    return str;
}
```

- **Why this code?**  
  - Simple: Just checks for spaces and capitalizes the next letter.  
  - Time: O(N) (single loop through string).  
  - Space: O(1) extra (modifies `str` in-place, returns it).  
  - Uses `toupper()`, which is beginner-friendly and similar to `tolower()` from your palindrome question.  
  - Handles all cases, including long strings (up to 10^5).

---

### Step 4: Explain the Code Line by Line (Beginner-Friendly)
Let’s break it down super simply, assuming you know basic C++ (like loops) but struggle with strings.

- **#include <bits/stdc++.h>**  
  - Includes tools like `string` and `toupper()` (converts a character to uppercase).  
  - Think of it as a toolbox for string problems, like `<cctype>` for `isalnum()` and `tolower()` in your previous question.

- **string convertString(string str)**  
  - Takes a string `str` (e.g., "i love").  
  - Returns a string with the first letter of each word capitalized (e.g., "I Love").  
  - `str` is passed by value, so we can modify it safely and return it.

- **int n = str.size();**  
  - `str.size()` gives the length of the string (e.g., "i love" → `n = 6`).  
  - Why? We need to know how far to loop through the string.

- **if (n > 0) { str[0] = toupper(str[0]); }**  
  - Checks if the string is not empty (`n > 0`).  
  - `str[0]`: First character of the string (e.g., 'i' in "i love").  
  - `toupper(str[0])`: Converts it to uppercase (e.g., 'i' → 'I').  
  - `str[0] = toupper(str[0])`: Updates the first character.  
  - Example: "i love" → `str[0] = 'I'`, so string becomes "I love".  
  - Why check `n > 0`? To avoid accessing `str[0]` if the string is empty (though constraints ensure `n >= 1`).

- **for (int i = 1; i < n; i++)**  
  - Loops through the string starting from index 1 (second character) to `n-1` (last character).  
  - Why start at `i = 1`? We already handled the first character (`str[0]`).  
  - Example: For "i love", loop over indices 1 (' '), 2 ('l'), 3 ('o'), 4 ('v'), 5 ('e').

- **if (str[i-1] == ' ') { str[i] = toupper(str[i]); }**  
  - `str[i-1]`: Checks the previous character. If it’s a space (' '), the current character (`str[i]`) is the start of a new word.  
  - `str[i] = toupper(str[i])`: Capitalizes the current character.  
  - Example: For "i love", at `i = 2`:  
    - `str[1] = ' '`, so `str[2] = 'l'` becomes `toupper('l') = 'L'`.  
    - String becomes "I Love".  
  - Why `i-1`? To check if the previous position was a space, indicating a new word starts at `i`.

- **return str;**  
  - Returns the modified string with all first letters capitalized.

---

### Step 5: Dry Run (Line by Line with Examples)
Let’s run the code on paper with the problem’s sample inputs to see how it works.

#### **Example 1: str = "i love programming"**
Goal: Output "I Love Programming".

1. **Enter**: `str = "i love programming"`.  
2. **int n = str.size();**  
   - `n = 17` (string length).  
3. **if (n > 0) { str[0] = toupper(str[0]); }**  
   - `n = 17 > 0`, true.  
   - `str[0] = 'i'`, `toupper('i') = 'I'`, so `str[0] = 'I'`.  
   - String: "I love programming".  
4. **for (int i = 1; i < n; i++)**  
   - `i = 1`: `str[0] = 'I'`, not a space, skip.  
   - `i = 2`: `str[1] = ' '`, space! `str[2] = 'l'`, `toupper('l') = 'L'`, `str[2] = 'L'`.  
     - String: "I Love programming".  
   - `i = 3`: `str[2] = 'L'`, not a space, skip.  
   - `i = 4`: `str[3] = 'o'`, not a space, skip.  
   - `i = 5`: `str[4] = 'v'`, not a space, skip.  
   - `i = 6`: `str[5] = 'e'`, not a space, skip.  
   - `i = 7`: `str[6] = ' '`, space! `str[7] = 'p'`, `toupper('p') = 'P'`, `str[7] = 'P'`.  
     - String: "I Love Programming".  
   - `i = 8` to `i = 16`: No spaces, skip all.  
5. **return str;**  
   - Output: "I Love Programming".

#### **Example 2: str = "they are playing cricket"**
Goal: Output "They Are Playing Cricket".

1. **Enter**: `str = "they are playing cricket"`.  
2. **n = 22;**  
3. **if (n > 0)**  
   - `str[0] = 't'`, `toupper('t') = 'T'`, `str[0] = 'T'`.  
   - String: "They are playing cricket".  
4. **for (int i = 1; i < n; i++)**  
   - `i = 5`: `str[4] = ' '`, `str[5] = 'a'`, `toupper('a') = 'A'`, `str[5] = 'A'`.  
     - String: "They Are playing cricket".  
   - `i = 9`: `str[8] = ' '`, `str[9] = 'p'`, `toupper('p') = 'P'`, `str[9] = 'P'`.  
     - String: "They Are Playing cricket".  
   - `i = 16`: `str[15] = ' '`, `str[16] = 'c'`, `toupper('c') = 'C'`, `str[16] = 'C'`.  
     - String: "They Are Playing Cricket".  
   - Other indices: No spaces, skip.  
5. **return str;**  
   - Output: "They Are Playing Cricket".

#### **Example 3: str = "good to see you"**
Goal: Output "Good To See You".

1. **Enter**: `str = "good to see you"`.  
2. **n = 14;**  
3. **if (n > 0)**  
   - `str[0] = 'g'`, `toupper('g') = 'G'`, `str[0] = 'G'`.  
   - String: "Good to see you".  
4. **for (int i = 1; i < n; i++)**  
   - `i = 5`: `str[4] = ' '`, `str[5] = 't'`, `toupper('t') = 'T'`, `str[5] = 'T'`.  
     - String: "Good To see you".  
   - `i = 8`: `str[7] = ' '`, `str[8] = 's'`, `toupper('s') = 'S'`, `str[8] = 'S'`.  
     - String: "Good To See you".  
   - `i = 12`: `str[11] = ' '`, `str[12] = 'y'`, `toupper('y') = 'Y'`, `str[12] = 'Y'`.  
     - String: "Good To See You".  
5. **return str;**  
   - Output: "Good To See You".

---

### Step 6: Connection to Your Previous Questions
- **From your palindrome problem**:  
  - You struggled with `isalnum()` (checks if a character is a letter/number) and `tolower()` (converts to lowercase).  
  - This problem is simpler: No need for `isalnum()` because the string only has letters and spaces.  
  - We use `toupper()` instead of `tolower()`, but it’s similar:  
    - `tolower('A') = 'a'` (makes lowercase).  
    - `toupper('a') = 'A'` (makes uppercase).  
  - Strings are still lists of characters, like in the palindrome problem, but here we’re just changing specific characters (first letter of each word).

- **Why easier than palindrome?**  
  - No need to skip characters (like symbols in palindrome).  
  - Only need to find spaces and capitalize the next letter.  
  - No two-pointer logic, just a single loop.

---

### Step 7: Why This Code Works
- **Correctness**:  
  - Capitalizes the first character (`str[0]`).  
  - Checks for spaces and capitalizes the next character.  
  - Leaves all other characters unchanged.  
- **Time Complexity**: O(N) (single loop through string).  
- **Space Complexity**: O(1) extra (modifies `str` in-place, returns it).  
- **Handles Edge Cases**:  
  - Empty string: `n = 0`, skips loop, returns empty string (valid per constraints).  
  - Single word: Capitalizes first letter (e.g., "hello" → "Hello").  
  - Multiple spaces: Constraints imply single spaces, but code works regardless.

---

### Step 8: Alternative Approach
You could process the string by splitting it into words, but it’s overkill:  
- Split `str` into words (using space as delimiter).  
- Capitalize first letter of each word.  
- Join words back with spaces.  
- **Why not use this?**  
  - Takes O(N) space for new strings.  
  - More complex for beginners.  
  - Current solution is simpler and modifies in-place.

---

### Step 9: Tips for Beginners
- **Strings**:  
  - Think of `str` as a list: "cat" = ['c', 'a', 't'].  
  - `str[i]` gets the i-th character.  
  - You can change `str[i]` directly (e.g., `str[0] = 'C'`).  
- **Practice `toupper()`**:  
  - Try: `cout << (char)toupper('a') << endl;` (prints 'A').  
  - Try: `cout << (char)toupper('A') << endl;` (prints 'A').  
- **Debugging**: Print the string after each change:  
  ```cpp
  str[i] = toupper(str[i]);
  cout << "After i=" << i << ": " << str << endl;
  ```
- **Test Cases**:  
  - "hello" → "Hello".  
  - "a b c" → "A B C".  
  - "ALREADY UPPER" → "ALREADY UPPER".  
- **Submit**: Paste the function on Coding Ninjas; it’ll handle test cases.

---

### Step 10: Summary
- **Problem**: Capitalize the first letter of each word in a string.  
- **Solution**: Check first character and characters after spaces, use `toupper()` to capitalize.  
- **Code**: Simple loop, O(N) time, O(1) extra space.  
- **Dry Run**: Showed how it works for sample inputs.  
- **Connection**: Uses `toupper()`, similar to `tolower()` from your palindrome problem, but simpler logic.  

