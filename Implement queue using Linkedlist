Hereâ€™s the implementation of the `Queue` using a linked list in C++:

### Implementation

```cpp
/**
 * Definition of linked list
 * class Node {
 * public:
 *     int data;
 *     Node* next;
 *     Node() : data(0), next(nullptr) {}
 *     Node(int x) : data(x), next(nullptr) {}
 *     Node(int x, Node* next) : data(x), next(next) {}
 * };
 * 
 * Definition of Queue
 * struct Queue {
 *   Node* front;
 *   Node* rear;
 *   void push(int);
 *   int pop();
 *   
 *   Queue() {
 *       front = rear = NULL;
 *   }
 * };
 */

void Queue::push(int x) {
    // Create a new node with the given value
    Node* newNode = new Node(x);

    // If the queue is empty, both front and rear point to the new node
    if (rear == NULL) {
        front = rear = newNode;
        return;
    }

    // Otherwise, link the new node at the end of the queue and update the rear
    rear->next = newNode;
    rear = newNode;
}

int Queue::pop() {
    // If the queue is empty, return -1
    if (front == NULL) {
        return -1;
    }

    // Store the data of the front node to return later
    int result = front->data;

    // Move the front pointer to the next node
    Node* temp = front;
    front = front->next;

    // If the front becomes NULL, set rear to NULL as well (queue becomes empty)
    if (front == NULL) {
        rear = NULL;
    }

    // Delete the old front node
    delete temp;

    // Return the popped value
    return result;
}
```

---

### Explanation of Functions

1. **`push(int x)`**:
   - Create a new `Node` with the value `x`.
   - If the queue is empty (both `front` and `rear` are `NULL`), set both to the new node.
   - If not empty, add the new node at the end (`rear->next`) and update the `rear` pointer.

2. **`pop()`**:
   - If the queue is empty (`front == NULL`), return `-1`.
   - Otherwise, store the `data` from the front node for later return.
   - Move the `front` pointer to the next node and delete the old front node.
   - If the `front` becomes `NULL` after the operation, also set `rear` to `NULL` (queue becomes empty).
   - Return the value of the removed node.

---

### Complexity Analysis

- **Time Complexity**:
  - `push`: **O(1)** (adding at the end of the linked list).
  - `pop`: **O(1)** (removing from the front of the linked list).
  
- **Space Complexity**:
  - **O(1)** (no additional memory used except for the linked list nodes).

---

### Example Walkthrough

#### Input:
```plaintext
q = 5
queries = [[1, 3], [2], [1, 4], [2], [2]]
```

#### Execution:

1. **Push 3**:
   - Queue: `3 -> NULL`
   
2. **Pop**:
   - Remove `3`, return `3`.
   - Queue: `NULL`
   
3. **Push 4**:
   - Queue: `4 -> NULL`

4. **Pop**:
   - Remove `4`, return `4`.
   - Queue: `NULL`

5. **Pop**:
   - Queue is empty, return `-1`.

#### Output:
```plaintext
3 4 -1
```

This implementation is efficient, simple, and meets the requirements of the problem.
