

### Problem Statement Ko Simple Samajhte Hai
Bro, yeh problem ek string `s` ko ek 32-bit signed integer mein convert karne ke baare mein hai. Yeh ek function `myAtoi(string s)` banane ka kaam hai jo string ko number mein badle. Yeh kaise kaam karta hai, yeh steps hai:

1. **Whitespace Ignore Karo:** String ke aage ke extra spaces (" ") ko hatt do.
2. **Sign Check Karo:** Dekho ki agla character `-` ya `+` hai ya nahi. Agar `-` hai toh number negative hoga, agar `+` hai toh positive, aur agar kuch nahi hai toh positive assume karo.
3. **Number Padho:** Zero se shuru hone wale digits ko ignore karte hue number padho, jab tak non-digit character na mile ya string khatam na ho. Agar koi digit nahi mila, toh result 0 hoga.
4. **Range Check Karo:** Agar number 32-bit signed integer range `[−2^31, 2^31 − 1]` (yaani `-2147483648` se `2147483647` tak) ke bahar hai, toh use limit mein adjust karo:
   - `-2147483648` se chhota toh `-2147483648` banao.
   - `2147483647` se bada toh `2147483647` banao.
5. **Result Return Karo:** Final integer return karo.

#### Examples:
1. **Input:** `s = "42"`
   - Step 1: No leading space.
   - Step 2: No sign, so positive.
   - Step 3: Read "42".
   - Step 4: 42 range mein hai.
   - Output: `42`.
2. **Input:** `s = " -042"`
   - Step 1: Ignore leading spaces.
   - Step 2: `-` hai, toh negative.
   - Step 3: Read "042" (leading zeros ignore, result -42).
   - Step 4: -42 range mein hai.
   - Output: `-42`.
3. **Input:** `s = "1337c0d3"`
   - Step 1: No leading space.
   - Step 2: No sign, positive.
   - Step 3: Read "1337" (stop at 'c').
   - Step 4: 1337 range mein hai.
   - Output: `1337`.
4. **Input:** `s = "0-1"`
   - Step 1: No leading space.
   - Step 2: No sign, positive.
   - Step 3: Read "0" (stop at '-').
   - Step 4: 0 range mein hai.
   - Output: `0`.
5. **Input:** `s = "words and 987"`
   - Step 1: No leading space.
   - Step 2: 'w' non-digit, stop.
   - Step 3: No digits read.
   - Step 4: Result 0.
   - Output: `0`.

#### Constraints:
- `0 <= s.length <= 200`.
- String mein English letters (upper/lower), digits (0-9), space, `+`, `-`, aur `.` ho sakte hai.

---

### Code with Line-by-Line Explanation and Comments
```cpp
class Solution {
public:
    int myAtoi(string s) {
        int i = 0;                  // Index to traverse the string
        while (i < s.length() && s[i] == ' ') i++; // Ignore leading whitespace
        
        // Check for sign
        bool isNegative = false;    // Flag for negative number
        if (i < s.length() && (s[i] == '-' || s[i] == '+')) {
            isNegative = (s[i] == '-'); // Set flag if '-'
            i++;                    // Move past sign
        }
        
        // Convert to integer
        long result = 0;            // Use long to handle overflow temporarily
        while (i < s.length() && isdigit(s[i])) { // Read digits
            result = result * 10 + (s[i] - '0'); // Build number
            i++;                    // Move to next character
            
            // Check for 32-bit integer overflow
            if (result > INT_MAX) break; // INT_MAX = 2147483647
        }
        
        // Apply sign and clamp to 32-bit range
        if (isNegative) result = -result;
        if (result > INT_MAX) return INT_MAX;   // Clamp to 2147483647
        if (result < INT_MIN) return INT_MIN;   // Clamp to -2147483648
        return (int)result;                     // Return as integer
    }
};
```

---

### Built-in Functions Explained
1. **`s.length()`**
   - String ki total length deta hai.
2. **`isdigit(s[i])`**
   - Check karta hai ki `s[i]` ek digit (0-9) hai ya nahi (built-in function).
3. **`INT_MAX` aur `INT_MIN`**
   - `INT_MAX = 2147483647` aur `INT_MIN = -2147483648` 32-bit signed integer ke limits hai (built-in constants).
4. **`long result`**
   - `long` ek bada integer type hai jo overflow handle karne ke liye use hota hai.

---

### Dry Run Har Line Ke Liye (Example 1: `s = "42"`)

#### Initial State:
- `s = "42"`.
- `i = 0`, `result = 0`, `isNegative = false`.

#### Line 4: `int i = 0; while (i < s.length() && s[i] == ' ') i++;`
- **Kya Hua:** `i = 0`, `s.length() = 2`, `s[0] != ' '`, loop nahi chalega.
- **Values:** `i = 0`.

#### Line 6-10: `bool isNegative = false; if (i < s.length() && (s[i] == '-' || s[i] == '+')) { ... }`
- **Kya Hua:** `i = 0 < 2` true, `s[0] = '4'` (neither '-' nor '+'), if false.
- **Values:** `isNegative = false`, `i = 0`.

#### Line 12-17: `long result = 0; while (i < s.length() && isdigit(s[i])) { ... }`
- **Loop Start:** `i = 0`, `s[0] = '4'` digit hai.
  - `result = 0 * 10 + ('4' - '0') = 0 + 4 = 4`.
  - `i = 1`.
  - `result = 4 < 2147483647`, continue.
- **i = 1:** `s[1] = '2'` digit hai.
  - `result = 4 * 10 + ('2' - '0') = 40 + 2 = 42`.
  - `i = 2`.
  - `result = 42 < 2147483647`, continue.
- **i = 2:** `i = 2 < 2` false, loop khatam.
- **Values:** `result = 42`.

#### Line 19-22: `if (isNegative) result = -result; if (result > INT_MAX) return INT_MAX; if (result < INT_MIN) return INT_MIN; return (int)result;`
- **Kya Hua:** `isNegative = false`, no change.
- `result = 42` range mein hai.
- **Output:** `42`.

---

### Dry Run Example 2: `s = " -042"`

- **Initial:** `i = 0`, `result = 0`, `isNegative = false`.
- **Line 4:** `s[0] = ' '`, `i = 1`; `s[1] = ' '`, `i = 2`; `s[2] != ' '`, `i = 2`.
- **Line 6-10:** `s[2] = '-'`, `isNegative = true`, `i = 3`.
- **Line 12-17:**
  - `i = 3`, `s[3] = '0'`, `result = 0 * 10 + 0 = 0`, `i = 4`.
  - `i = 4`, `s[4] = '4'`, `result = 0 * 10 + 4 = 4`, `i = 5`.
  - `i = 5`, `s[5] = '2'`, `result = 4 * 10 + 2 = 42`, `i = 6`.
  - `i = 6 < 6` false.
- **Line 19-22:** `isNegative = true`, `result = -42`.
- **Output:** `-42`.

---

### Dry Run Example 3: `s = "1337c0d3"`

- **Initial:** `i = 0`, `result = 0`, `isNegative = false`.
- **Line 4:** No space, `i = 0`.
- **Line 6-10:** No sign, `isNegative = false`, `i = 0`.
- **Line 12-17:**
  - `i = 0`, `s[0] = '1'`, `result = 0 * 10 + 1 = 1`, `i = 1`.
  - `i = 1`, `s[1] = '3'`, `result = 1 * 10 + 3 = 13`, `i = 2`.
  - `i = 2`, `s[2] = '3'`, `result = 13 * 10 + 3 = 133`, `i = 3`.
  - `i = 3`, `s[3] = '7'`, `result = 133 * 10 + 7 = 1337`, `i = 4`.
  - `i = 4`, `s[4] = 'c'` not digit, loop khatam.
- **Line 19-22:** No negative, `result = 1337` range mein.
- **Output:** `1337`.

---

### Code Analysis
- **Logic:** Ignore space, check sign, read digits, clamp range.
- **Time Complexity:** `O(n)` – Ek baar traverse.
- **Space Complexity:** `O(1)` – Fixed variables.
- **Pros:** Clear steps.
- **Cons:** Overflow handling tricky.

---

### Flow Ka Summary
- **Shuru Mein:** Ignore space, set sign.
- **Phir:** Digits read karo.
- **End Mein:** Range adjust karo, return karo.

#### Values Ka Flow:
- `i` index.
- `result` number.
- `isNegative` sign.

---

### Beginner Ke Liye Tips
- **Space Ignore:** Aage ke spaces hatt do.
- **Digit Check:** `isdigit()` use karo.
- **Practice:** Chhote strings pe try karo.

Ab samajh aaya na, bro? Har line ka kaam, comments, aur values ka flow clear ho gaya hoga. Koi doubt ho toh bol! Kya bolta hai?
