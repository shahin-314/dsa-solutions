

# What this function does (in one line)

Input vector `arr` me se **duplicates hataata hai** aur **pehli baar aayi hui** values ko **original order** me `result` me return karta hai.

---

# Line-by-line explanation

```cpp
#include <bits/stdc++.h>
using namespace std;
```

* ye sab **standard C++ headers** include kar deta hai (vector, set, etc.)
* `using namespace std;` likhne se har jagah `std::` nahi lagana padta.

```cpp
vector<int> removeDuplicates(vector<int> arr) {
```

* function ka naam: `removeDuplicates`
* input: `arr` (numbers ki list)
* output: **vector<int>** (duplicates removed, order maintained)

```cpp
    set<int> seen;             // membership check ke liye (O(logN))
    vector<int> result;
```

* `seen` = ek **ordered set**. Isme hum “jo numbers pehle hi aa chuke hain” ka record rakhte hain.
* `result` = final answer (jisme sirf **first occurrence** push karenge).

```cpp
    for (int x : arr) {
```

* **range-based for loop**: `arr` ke har element ko `x` naam se ek-ek karke uthayega **left se right**.

```cpp
        if (seen.insert(x).second) {
            result.push_back(x);
        }
```

* `seen.insert(x)` **pair** return karta hai: `{iterator, bool inserted}`

  * `.second == true`  → `x` **pehli baar** insert hua (yaani pehli baar mila)
  * `.second == false` → `x` **pehle se** present tha (duplicate)
* agar `.second` true hai → `x` ko `result` me **push\_back** kar do
* agar false hai → skip (kyunki duplicate hai)

```cpp
    }
    return result;
}
```

* loop khatam → `result` return.

---

# “`seen.insert(x).second`” ekdum simple example

Socho `seen = { }` initially:

* `insert(5)` → `{5}` ban gaya, **inserted=true**
* `insert(7)` → `{5,7}`, **inserted=true**
* `insert(5)` → set me 5 already hai, **inserted=false** (duplicate)

Hum bas isi **true/false** pe decision le rahe hain.

---

# Dry runs (line by line with values)

### Example-A: `arr = [1, 2, 2, 3, 4]`

| Step | `x` | Kya hota hai (`seen.insert(x).second`) | `seen` after step | `result` after step | Reason     |
| ---: | --: | -------------------------------------- | ----------------- | ------------------- | ---------- |
|    1 |   1 | true (pehli baar)                      | {1}               | \[1]                | first time |
|    2 |   2 | true                                   | {1,2}             | \[1,2]              | first time |
|    3 |   2 | false (duplicate)                      | {1,2}             | \[1,2]              | skip       |
|    4 |   3 | true                                   | {1,2,3}           | \[1,2,3]            | first time |
|    5 |   4 | true                                   | {1,2,3,4}         | \[1,2,3,4]          | first time |

**Return:** `[1, 2, 3, 4]`

---

### Example-B: `arr = [3, 1, 2, 1, 3]`  (order maintain check)

| Step | `x` | Result of insert | `seen`  | `result` | Note       |
| ---: | --: | ---------------- | ------- | -------- | ---------- |
|    1 |   3 | true             | {3}     | \[3]     | first time |
|    2 |   1 | true             | {1,3}   | \[3,1]   | first time |
|    3 |   2 | true             | {1,2,3} | \[3,1,2] | first time |
|    4 |   1 | false            | {1,2,3} | \[3,1,2] | duplicate  |
|    5 |   3 | false            | {1,2,3} | \[3,1,2] | duplicate  |

**Return:** `[3, 1, 2]`  → **original order** preserved.

---

### Example-C: `arr = [10, 10, 10, 10]`

| Step | `x` | insert ok? | `seen` | `result` |
| ---: | --: | ---------- | ------ | -------- |
|    1 |  10 | true       | {10}   | \[10]    |
|    2 |  10 | false      | {10}   | \[10]    |
|    3 |  10 | false      | {10}   | \[10]    |
|    4 |  10 | false      | {10}   | \[10]    |

**Return:** `[10]`

---

# The same code with super-easy comments

```cpp
#include <bits/stdc++.h>
using namespace std;

vector<int> removeDuplicates(vector<int> arr) {
    // 'seen' me hum woh numbers store karenge jo pehle hi mil chuke hain.
    // set duplicate ko allow nahi karta; insert karne par batata hai pehli baar tha ya nahi.
    set<int> seen;

    // 'result' me final answer banayenge — first-occurence wali values original order me.
    vector<int> result;

    // arr ke har element ko left se right process karo
    for (int x : arr) {
        // insert(x) ek pair return karta hai: {iterator, inserted?}
        // .second == true  -> x first time aaya (set me add hua)
        // .second == false -> x pehle se present (duplicate)
        if (seen.insert(x).second) {
            // pehli baar mila, to answer me daal do
            result.push_back(x);
        }
        // warna duplicate hai -> skip
    }

    // final cleaned list return
    return result;
}
```

---

## Quick notes

* **Time complexity:** set ke saath roughly `O(N log N)` (har insert `logN`).
* Agar tum speed chahte ho, to `set<int>` ki jagah **`unordered_set<int>`** use kar sakte ho
  (average `O(1)` per insert/lookup), code bilkul same rahega — sirf type change:

  ```cpp
  unordered_set<int> seen;
  ```

