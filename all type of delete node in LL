#include <iostream>
#include <vector>
using namespace std;

   class Node
    {
        public:
        int data;
        Node* next;
        
        public:
        Node(int data1 , Node* next1)
        {
            data = data1;
            next = next1;
        }
        
        public:
        Node (int data1)
        {
            data = data1;
            next = nullptr;
        }
    };
    
    Node* convertArr2LL (vector<int> &arr) // convert array to LL
    {
        Node* head = new Node (arr[0]);
        Node* mover =  head;
        
        for(int i=1 ; i<arr.size() ; i++)
        {
            Node* temp = new Node(arr[i]);
            mover->next=temp;
            mover = temp;
        }
        return head;
    }
    
    int lenghtofLL(Node* head)
    {
        int cnt = 0;
        Node* temp = head;
        while(temp) // this will print the whole LL 
        {
            temp = temp -> next;
            cnt++;
        }
        
        return cnt;
    }
    
    int searchinLL(Node* head , int val)
    {
        Node* temp = head;
        while(temp) //OR  temp!==null
        {
            if(temp -> data == val) return 1;
            temp = temp -> next;
        }
        return 0;
    }
    
    void print (Node* head) // prints LL
    {
        while(head!= NULL) // head
        {
            cout<<head ->data << " ";
            head = head -> next;
        }
        cout<<endl;
    }
    
    Node* deletehead (Node* head)
    {
        if(head == nullptr) return head;
        Node* temp = head;
        head = head -> next;
        delete temp;
        return head;
    }
    
    Node* deletetail(Node* head)
    {
        if(head == NULL || head -> next == NULL ) return NULL;
        
        Node* temp = head;
        while(temp -> next -> next != NULL)
        {
            temp = temp -> next;
        }
        
        delete temp -> next;
        temp -> next = nullptr;
        return head;
    }
    
    Node* removeKele(Node* head, int k) // ele as per position
    {
       if(head == NULL) return head;
       
       if(k==1)
       {
           Node* temp = head;
           head = head -> next;
           delete temp;
           return head;
       }
       
       int cnt = 0;
       Node* temp = head;
       Node* prev = NULL;
       
       while(temp != NULL)
       {
           cnt++;
           
           if(cnt == k)
           {
               prev -> next = prev -> next ->next;
               delete temp ;
               break;
           }
           
           prev = temp;
           temp = temp -> next;
       }
       return head;
        
    }
    
     Node* removeVal(Node* head, int val) // del val 
    {
       if(head == NULL) return head;
       
       if(head -> data == val)
       {
           Node* temp = head;
           head = head -> next;
           delete temp;
           return head;
       }
      
       Node* temp = head;
       Node* prev = NULL;
       
       while(temp != NULL)
       {
           if(temp -> data == val)
           {
               prev -> next = prev -> next ->next;
               delete temp ;
               break;
           }
           
           prev = temp;
           temp = temp -> next;
       }
       return head;
        
    }

int main() 
{
    vector<int> arr = {12,5,8,9};
    Node* head = convertArr2LL(arr);
    // cout<< head->data; // this will print the head of the LL (12)
    
    // traversal in LL 
    // Node* temp = head;
    // while(temp) // this will print the whole LL 
    // {
    //     cout<<temp->data <<" "; 
    //     temp = temp -> next;
    // }
    
    // cout<<lenghtofLL(head);  4
    
    // cout << searchinLL (head,9);  search in list.
    
    // head = deletehead(head);
    // head = deletetail(head);
    // head = removeKele(head, 2);
    head =  removeVal (head , 8);
    print(head);
    
}
