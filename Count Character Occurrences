
### Problem Statement Recap: Count Character Occurrences
- **Problem:** Tumhe ek string `S` diya gaya hai jiska length `N` hai, aur ek character `C` diya gaya hai. Tumhe yeh count karna hai ki `C` string `S` mein kitni baar aata hai, aur woh count return karna hai.
- **Examples:**
  - Input: `N = 7`, `S = "abacaba"`, `C = 'a'`
    - Output: `4` (kyunki 'a' 0, 2, 4, 6 index pe hai)
  - Input: `N = 5`, `S = "hello"`, `C = 'l'`
    - Output: `2` (kyunki 'l' 2 aur 3 index pe hai)
- **Constraints:**
  - 1 <= N <= 10^5
  - 'a' <= characters in 'S' <= 'z'
  - 'a' <= C <= 'z'
  - Time Limit: 1 sec

---

### Approach: Linear Traversal
- **Idea:** String ko ek baar traverse karo aur har character ko `C` se compare karo. Jab match ho, count badhao.
- **Steps:**
  1. Ek counter variable banayein aur usko 0 se initialize karo.
  2. String ke har character ko loop mein check karo.
  3. Agar current character `C` ke barabar hai, toh count badhao.
  4. Final count return karo.

- **Why This Works?** Yeh O(n) time leta hai aur constraints ke liye perfect hai.

---

### Code with Detailed Explanation

```cpp
int countOccurrences(int n, string &s, char c) 
{
    int count = 0; // Variable to store the count of occurrences
    // Comment: Yeh batayega ki character C kitni baar aaya. Shuru mein 0 hai kyunki abhi counting nahi shuru hui.

    for (int i = 0; i < n; i++) { // Loop through each character in the string
        // Comment: Yeh loop string ke har index pe jayega aur character check karega.
        // Flow: i=0 se n-1 tak chalega, har baar ek character dekhega.

        if (s[i] == c) { // Check if current character matches c
            // Comment: Agar current character (s[i]) char c ke barabar hai, toh count badhao.
            // Flow: Agar s[i] = 'a' aur c = 'a' hai, toh match hoga.

            count++; // Increment the count
            // Comment: Har match pe count ko 1 badhao.
            // Flow: count = 0 se 1 ho jayega, phir 2, aur aise badhega.
        }
    }

    return count; // Return the total count
    // Comment: Loop khatam hone ke baad yeh final count return karega.
    // Flow: 4 ya 2 jaise values return honge.
}
```

---

### Detailed Dry Run (Example: `n = 7`, `s = "abacaba"`, `c = 'a'`)
- **Initial State:**
  - `count = 0`, `s = "abacaba"`, `c = 'a'`

1. **Loop (i = 0):**
   - `s[0] = 'a'`, `s[0] == 'a'` (true)
   - `count = 0 + 1 = 1`

2. **Loop (i = 1):**
   - `s[1] = 'b'`, `s[1] == 'a'` (false)
   - `count = 1`

3. **Loop (i = 2):**
   - `s[2] = 'a'`, `s[2] == 'a'` (true)
   - `count = 1 + 1 = 2`

4. **Loop (i = 3):**
   - `s[3] = 'c'`, `s[3] == 'a'` (false)
   - `count = 2`

5. **Loop (i = 4):**
   - `s[4] = 'a'`, `s[4] == 'a'` (true)
   - `count = 2 + 1 = 3`

6. **Loop (i = 5):**
   - `s[5] = 'b'`, `s[5] == 'a'` (false)
   - `count = 3`

7. **Loop (i = 6):**
   - `s[6] = 'a'`, `s[6] == 'a'` (true)
   - `count = 3 + 1 = 4`

- **Return:** `4` (sahi)

---

### Dry Run (Example: `n = 5`, `s = "hello"`, `c = 'l'`)
- **Initial State:**
  - `count = 0`, `s = "hello"`, `c = 'l'`

1. **Loop (i = 0):**
   - `s[0] = 'h'`, `s[0] == 'l'` (false)
   - `count = 0`

2. **Loop (i = 1):**
   - `s[1] = 'e'`, `s[1] == 'l'` (false)
   - `count = 0`

3. **Loop (i = 2):**
   - `s[2] = 'l'`, `s[2] == 'l'` (true)
   - `count = 0 + 1 = 1`

4. **Loop (i = 3):**
   - `s[3] = 'l'`, `s[3] == 'l'` (true)
   - `count = 1 + 1 = 2`

5. **Loop (i = 4):**
   - `s[4] = 'o'`, `s[4] == 'l'` (false)
   - `count = 2`

- **Return:** `2` (sahi)

---

### Pura Flow Explanation
- **Step 1:** `count` ko 0 se shuru karo.
- **Step 2:** Ek loop chalao `n` baar, har index pe check karo ki `s[i]` `c` ke barabar hai ya nahi.
- **Step 3:** Agar match ho, toh `count` badhao.
- **Step 4:** Loop khatam hone ke baad `count` return karo.
- **Kyun Kaam Karta Hai:** Yeh har character ko ek baar check karta hai, toh sahi count milta hai.

---

### Time and Space Complexity
- **Time Complexity:** O(n), kyunki string ko ek baar traverse karte hai.
- **Space Complexity:** O(1), kyunki sirf `count` variable hai.

---

### Can We Use Built-in Functions?
- **Nahi Zaroori:**
  - Sirf loop aur comparison use hua.
  - **Optional:** `count(s.begin(), s.end(), c)` (algorithm header) use kar sakte hai:
    ```cpp
    #include <algorithm>
    return count(s.begin(), s.end(), c);
    ```
  - **Recommended:** Simple loop use karo kyunki yeh beginner ke liye aasan hai aur samajhne mein asaan hai.

---

### Beginner Tips
- **Practice:** `s = "aaa"`, `c = 'a'` pe try karo.
- **Visualize:** Har step pe `count` ka value paper pe likh ke dekho.
- **Debug:** `s[i]` aur `count` print kar ke check karo.

Ab samajh aaya na, bro? Problem statement, code ka logic, dry run, aur flow ke saath sab clear ho gaya hoga. Yeh function Coding Ninjas pe submit kar ke test cases pass kar lena. Koi doubt ho toh bol! Kya bolta hai? (Chai abhi garam hai, 08:13 PM IST!)
