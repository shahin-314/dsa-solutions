

### Problem Recap: Compress the String
- **Goal:** Consecutive repeated characters ko count ke saath replace karo agar count > 1 hai (e.g., "aaa" → "a3").
- **Examples:**
  - `"aaabbccdsa"` → `"a3b2c2dsa"`
  - `"aaabbcddeeeee"` → `"a3b2cd2e5"`
- **Constraints:** 0 <= N <= 10^6

---

### Short Approach: Single Pass with STL String Stream
- **Idea:** Ek baar traverse karo, consecutive count rakho, aur `ostringstream` (STL ka part) se directly string build karo. Yeh short aur clean hai.
- **Why STL?** `ostringstream` integer ko string mein easily convert karta hai, aur code ko ek line mein summarize kar sakte hai.

---

### Short Code with Explanation

```cpp
#include <bits/stdc++.h> 
using namespace std;

string getCompressedString(string &input) {
    if (input.empty()) return ""; // Handle empty string
    ostringstream result; // STL: Stream to build string
    // Comment: `ostringstream` ek stream hai jisme hum character aur number add kar sakte hai, jo akhir mein string ban jata hai.
    // STL Explanation: `<sstream>` header se aata hai, aur `ostringstream` dynamically string banane ke liye use hota hai.

    for (int i = 0, count = 1; i < input.length(); i++) {
        // Comment: `i` index track karta hai, `count` consecutive characters ka count rakhta hai.
        if (i + 1 < input.length() && input[i] == input[i + 1]) count++;
        // Comment: Agar agla character same hai, count badhao.
        else {
            result << input[i]; // Add current character
            if (count > 1) result << count; // Add count if > 1
            count = 1; // Reset count for next character
            // Comment: Jab character change ho, result mein add karo aur count reset karo.
        }
    }
    return result.str(); // Convert stream to string and return
    // Comment: `str()` STL function stream ko string mein convert karta hai.
    // STL Explanation: `ostringstream::str()` final string deta hai.
}
```

---

### Detailed Dry Run (Example: `input = "aaabbccdsa"`)
- **Initial State:**
  - `input = "aaabbccdsa"`, `result` (empty stream), `i = 0`, `count = 1`

1. **i = 0 ('a'):**
   - `i + 1 = 1`, `input[0] = 'a'`, `input[1] = 'a'` (same)
   - `count = 2`

2. **i = 1 ('a'):**
   - `i + 1 = 2`, `input[1] = 'a'`, `input[2] = 'a'` (same)
   - `count = 3`

3. **i = 2 ('a'):**
   - `i + 1 = 3`, `input[2] = 'a'`, `input[3] = 'b'` (different)
   - `else`:
     - `result << 'a'` → stream = "a"
     - `count = 3 > 1`, `result << 3` → stream = "a3"
     - `count = 1`

4. **i = 3 ('b'):**
   - `i + 1 = 4`, `input[3] = 'b'`, `input[4] = 'b'` (same)
   - `count = 2`

5. **i = 4 ('b'):**
   - `i + 1 = 5`, `input[4] = 'b'`, `input[5] = 'c'` (different)
   - `else`:
     - `result << 'b'` → stream = "a3b"
     - `count = 2 > 1`, `result << 2` → stream = "a3b2"
     - `count = 1`

6. **i = 5 ('c'):**
   - `i + 1 = 6`, `input[5] = 'c'`, `input[6] = 'c'` (same)
   - `count = 2`

7. **i = 6 ('c'):**
   - `i + 1 = 7`, `input[6] = 'c'`, `input[7] = 'd'` (different)
   - `else`:
     - `result << 'c'` → stream = "a3b2c"
     - `count = 2 > 1`, `result << 2` → stream = "a3b2c2"
     - `count = 1`

8. **i = 7 ('d'):**
   - `i + 1 = 8`, `input[7] = 'd'`, `input[8] = 's'` (different)
   - `else`:
     - `result << 'd'` → stream = "a3b2c2d"
     - `count = 1`, no count added
     - `count = 1`

9. **i = 8 ('s'):**
   - `i + 1 = 9`, `input[8] = 's'`, `input[9] = 'a'` (different)
   - `else`:
     - `result << 's'` → stream = "a3b2c2ds"
     - `count = 1`, no count added
     - `count = 1`

10. **i = 9 ('a'):**
    - `i + 1 = 10` (out of range)
    - `else`:
      - `result << 'a'` → stream = "a3b2c2dsa"
      - `count = 1`, no count added
      - `count = 1`

- **Final Output:** `result.str() = "a3b2c2dsa"` (sahi)

---

### Dry Run (Example: `input = "aaabbcddeeeee"`)
- **Steps:**
  - "aaa" → "a3"
  - "bb" → "b2"
  - "c" → "c"
  - "dd" → "d2"
  - "eeeee" → "e5"
- **Output:** `"a3b2cd2e5"` (sahi)

---

### Time and Space Complexity
- **Time Complexity:** O(N), ek baar traverse + `ostringstream` operations O(1) per character.
- **Space Complexity:** O(N) result string ke liye.

---

### STL Shortcuts Explained
- **`ostringstream result;`:** `<sstream>` header se aata hai. Yeh stream hai jisme hum `<<` operator se character aur numbers add kar sakte hai, aur `str()` se string nikal sakte hai.
- **`result << value;`:** Stream mein data add karta hai.
- **`result.str();`:** Stream ko string mein convert karta hai.

---

### Why This is Short?
- **Compact Loop:** `for (int i = 0, count = 1; ...)` mein `i` aur `count` ek line mein initialize hua.
- **No Extra Variables:** `ostringstream` directly string build karta hai, alag se string concat nahi karna padta.
- **No If-Else Nesting:** Logic ek line mein handle ho jata hai.

---

