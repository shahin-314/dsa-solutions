

### Problem Statement Recap: Binary Tree Preorder Traversal (LeetCode #144)
- **Problem:** Tumhe ek binary tree ka root node diya gaya hai. Tumhe preorder traversal (root -> left -> right) karna hai aur nodes ke values ka vector return karna hai.
- **Example:** `root = [1,null,2,3]` → Output: `[1,2,3]`
- **Tree Structure:**
  ```
      1
       \
        2
       /
      3
  ```
  - Root = 1
  - Left of 1 = null
  - Right of 1 = 2
  - Left of 2 = 3
  - Right of 2 = null

---

### Code with Detailed Line-by-Line Dry Run
```cpp
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> preorderTraversal(TreeNode* root) {
        vector<int> result; // Step 1: Initialize empty vector to store results
        // Explanation: Yeh vector mein preorder traversal ke values store honge.
        // Dry Run: result = []

        if (root == nullptr) return result; // Step 2: Check if root is null
        // Explanation: Agar tree khali hai, toh khali vector return karo.
        // Dry Run: root = 1 (not nullptr), so skip this and move to next line

        result.push_back(root->val); // Step 3: Add root value to result
        // Explanation: Preorder mein pehle root ka value add hota hai.
        // Dry Run: root->val = 1, result.push_back(1) -> result = [1]

        // Recursively traverse the left subtree
        vector<int> left = preorderTraversal(root->left); // Step 4: Call for left subtree
        // Explanation: Left subtree ka preorder traversal ke liye recursive call.
        // Dry Run: root->left = nullptr
        //          -> New call: preorderTraversal(nullptr)
        //          -> Inside new call: root = nullptr
        //          -> if (nullptr == nullptr) true, return [] -> left = []

        // Add left subtree result to the final result
        result.insert(result.end(), left.begin(), left.end()); // Step 5: Merge left result
        // Explanation: Left subtree ke values result mein add karo.
        // Dry Run: left = [], result.insert([1], [], []) -> result = [1] (no change)

        // Recursively traverse the right subtree
        vector<int> right = preorderTraversal(root->right); // Step 6: Call for right subtree
        // Explanation: Right subtree ka preorder traversal ke liye recursive call.
        // Dry Run: root->right = 2
        //          -> New call: preorderTraversal(2)
        //          -> Inside new call (for node 2):
        //             - result = [], if (2 != nullptr) -> continue
        //             - result.push_back(2->val) -> result = [2]
        //             - left = preorderTraversal(2->left) -> 2->left = 3
        //             -> New call: preorderTraversal(3)
        //             -> Inside new call (for node 3):
        //                - result = [], if (3 != nullptr) -> continue
        //                - result.push_back(3->val) -> result = [3]
        //                - left = preorderTraversal(3->left) -> 3->left = null -> []
        //                - result.insert([3], [], []) -> result = [3]
        //                - right = preorderTraversal(3->right) -> 3->right = null -> []
        //                - result.insert([3], [], []) -> result = [3]
        //                - return [3]
        //             - left = [3]
        //             - result.insert([2], [3]) -> result = [2,3]
        //             - right = preorderTraversal(2->right) -> 2->right = null -> []
        //             - result.insert([2,3], []) -> result = [2,3]
        //             - return [2,3]
        //          -> right = [2,3]

        // Add right subtree result to the final result
        result.insert(result.end(), right.begin(), right.end()); // Step 7: Merge right result
        // Explanation: Right subtree ke values result mein add karo.
        // Dry Run: right = [2,3], result.insert([1], [2,3]) -> result = [1,2,3]

        return result; // Step 8: Return final result
        // Explanation: Yeh final preorder sequence return karta hai.
        // Dry Run: return [1,2,3]
    }
};
```

---

### Detailed Flow with Step-by-Step Tracking
Let’s break it down with the flow for `root = [1,null,2,3]`:

#### **Call 1: root = 1**
- **Line 1:** `result = []`
- **Line 2:** `root != nullptr`, proceed
- **Line 3:** `result = [1]`
- **Line 4:** `left = preorderTraversal(null)`
  - **Call 2: root = null**
    - **Line 2:** `root == nullptr`, return `[]`
    - `left = []`
- **Line 5:** `result.insert([1], [])` → `result = [1]`
- **Line 6:** `right = preorderTraversal([2,3])`
  - **Call 3: root = 2**
    - **Line 1:** `result = []`
    - **Line 2:** `root != nullptr`, proceed
    - **Line 3:** `result = [2]`
    - **Line 4:** `left = preorderTraversal(2->left)` → `2->left = 3`
      - **Call 4: root = 3**
        - **Line 1:** `result = []`
        - **Line 2:** `root != nullptr`, proceed
        - **Line 3:** `result = [3]`
        - **Line 4:** `left = preorderTraversal(3->left)` → `3->left = null`
          - **Call 5: root = null**
            - **Line 2:** `return []`
            - `left = []`
        - **Line 5:** `result.insert([3], [])` → `result = [3]`
        - **Line 6:** `right = preorderTraversal(3->right)` → `3->right = null`
          - **Call 6: root = null**
            - **Line 2:** `return []`
            - `right = []`
        - **Line 7:** `result.insert([3], [])` → `result = [3]`
        - **Line 8:** `return [3]`
      - `left = [3]`
    - **Line 5:** `result.insert([2], [3])` → `result = [2,3]`
    - **Line 6:** `right = preorderTraversal(2->right)` → `2->right = null`
      - **Call 7: root = null**
        - **Line 2:** `return []`
        - `right = []`
    - **Line 7:** `result.insert([2,3], [])` → `result = [2,3]`
    - **Line 8:** `return [2,3]`
  - `right = [2,3]`
- **Line 7:** `result.insert([1], [2,3])` → `result = [1,2,3]`
- **Line 8:** `return [1,2,3]`
- **Output:** `[1,2,3]`

---

### Flow Visualization
- **Call Stack Flow:**
  1. Start with `root = 1`
  2. Go to `left = null` → return `[]`
  3. Go to `right = 2`
     - Go to `left = 3`
       - Go to `left = null` → return `[]`
       - Go to `right = null` → return `[]`
       - Return `[3]`
     - Go to `right = null` → return `[]`
     - Return `[2,3]`
  4. Merge `[1]` with `[2,3]` → `[1,2,3]`

- **Preorder Order:** 1 (root) -> 2 (right) -> 3 (left of 2)

---

### Is This Preorder Traversal and Built-in Function?
- **Is This Preorder Traversal?**
  - Haan, yeh ek preorder traversal hai. Order hai **root -> left -> right**, jo is code mein follow ho raha hai. Dry run se bhi `[1,2,3]` output aaya, jo tree ke preorder ke mutabiq hai.

- **Is This a Built-in Function?**
  - Nahi, yeh built-in function nahi hai. Yeh ek custom recursive implementation hai jo humne khud likha hai. C++ ki standard library mein binary tree traversal ke liye koi direct `preorderTraversal` function nahi hai. Yeh pura manual code hai jo recursion ka use karke kaam karta hai.

---

### Time and Space Complexity
- **Time Complexity: O(n)**
  - Har node ek baar process hota hai.
- **Space Complexity: O(h)**
  - Recursion stack space, jahan `h` height hai (skewed tree mein O(n)).

---

### Why This Approach Works?
- **Recursive Logic:** Har node pe root pehle process hota hai, phir left aur right recursively handle hote hai, jo preorder ki definition hai.
- **Base Case:** `nullptr` check se khali subtree ya tree handle ho jata hai.

---

