Sure! Let’s break down the problem and the code step by step.

### Problem Explanation

You have two sorted arrays `a` and `b`, and you need to find the k-th smallest element in their combined sorted array. The catch here is that you want to do this efficiently, without merging the two arrays. 

### Code Explanation

Here’s the code with comments to make it easier to understand:

```cpp
#include<bits/stdc++.h> // Include necessary headers

// Function to find the k-th element in two sorted arrays
int kthElement(vector<int> &a, vector<int>& b, int n1, int n2, int k) {
    // Ensure a is the smaller array for efficiency
    if (n1 > n2) return kthElement(b, a, n2, n1, k);
    
    int low = max(k - n2, 0); // Low boundary for binary search
    int high = min(k, n1);    // High boundary for binary search

    while (low <= high) {
        int mid1 = (low + high) >> 1; // Middle index for array a
        int mid2 = k - mid1;           // Corresponding index for array b
        
        // Initialize left and right values
        int l1 = (mid1 > 0) ? a[mid1 - 1] : INT_MIN; // Left value for a
        int l2 = (mid2 > 0) ? b[mid2 - 1] : INT_MIN; // Left value for b
        int r1 = (mid1 < n1) ? a[mid1] : INT_MAX;    // Right value for a
        int r2 = (mid2 < n2) ? b[mid2] : INT_MAX;    // Right value for b
        
        // Check if we found the correct partition
        if (l1 <= r2 && l2 <= r1) {
            return max(l1, l2); // Return the k-th element
        } else if (l1 > r2) {
            high = mid1 - 1; // Move left
        } else {
            low = mid1 + 1;  // Move right
        }
    }

    return 0; // In case of an error, should not reach here
}
```

### How the Code Works

1. **Initial Check**: The first condition checks if the first array `a` is larger than `b`. If so, we swap them. This ensures that we always perform the binary search on the smaller array, which makes our algorithm more efficient.

2. **Binary Search Setup**: We set the `low` and `high` pointers for the binary search based on `k`. The idea is to find a partition in both arrays that allows us to determine the k-th smallest element.

3. **Finding the Partition**:
    - We calculate `mid1` as the middle index for array `a` and `mid2` as the corresponding index for array `b`.
    - We find the left and right values around the partition in both arrays.

4. **Condition Check**: 
    - If the largest left value from both arrays is less than or equal to the smallest right value from both arrays, we have found our k-th element, which is `max(l1, l2)`.
    - If `l1` is greater than `r2`, we need to move our search left (`high = mid1 - 1`).
    - Otherwise, we move right (`low = mid1 + 1`).

### Example Walkthrough

Let’s say we have:
- Array `a = [2, 3, 6, 7, 9]` (n1 = 5)
- Array `b = [1, 4, 8, 10]` (n2 = 4)
- We want to find the 5-th smallest element (k = 5).

1. **Initial Values**:
   - Since `a` is already smaller, we proceed.
   - `low = max(5 - 4, 0) = 1`
   - `high = min(5, 5) = 5`

2. **First Iteration**:
   - `mid1 = (1 + 5) / 2 = 3` (check 3rd element of `a`, which is 7)
   - `mid2 = 5 - 3 = 2` (check 2nd element of `b`, which is 4)
   - Check partitions:
     - Lefts: `l1 = a[2] = 6`, `l2 = b[1] = 4`
     - Rights: `r1 = a[3] = 7`, `r2 = b[2] = 8`
   - Condition: `l1 (6) > r2 (8)` → Move `high` to 2.

3. **Second Iteration**:
   - `low = 1`, `high = 2`
   - `mid1 = 1` → `mid2 = 4`
   - Lefts: `l1 = 2`, `l2 = 10`
   - Rights: `r1 = 3`, `r2 = INT_MAX`
   - Condition: `l1 (2) <= r2 (INT_MAX)` and `l2 (10) > r1 (3)` → Move `low` to 2.

4. **Third Iteration**:
   - `low = 2`, `high = 2`
   - `mid1 = 2`, `mid2 = 3`
   - Lefts: `l1 = 3`, `l2 = 8`
   - Rights: `r1 = 6`, `r2 = 10`
   - Condition: `l1 (3) <= r2 (10)` and `l2 (8) <= r1 (6)` → Move `low` to 3.

5. **Final Check**: 
   - On finding the right condition, we return `max(l1, l2)`, which gives us `max(6, 8) = 6`.

### Conclusion

So, the 5-th smallest element in the combined sorted array of `a` and `b` is `6`.

This algorithm runs in O(log(min(n1, n2))) time complexity, making it efficient for large arrays. This way, we avoid the overhead of merging both arrays, keeping the solution optimized.
